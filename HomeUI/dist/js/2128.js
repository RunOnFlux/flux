"use strict";(globalThis["webpackChunkflux"]=globalThis["webpackChunkflux"]||[]).push([[2128],{39747:(e,t,a)=>{a.r(t),a.d(t,{default:()=>m});var s=function(){var e=this,t=e._self._c;return""!==e.getInfoResponse.data?t("b-card",[t("list-entry",{attrs:{title:"Flux owner Flux ID",data:e.userconfig.zelid}}),t("list-entry",{attrs:{title:"Status",data:e.getNodeStatusResponse.nodeStatus,variant:e.getNodeStatusResponse.class}}),t("list-entry",{attrs:{title:"Flux Payment Address",data:e.getNodeStatusResponse.data.payment_address}}),e.getInfoResponse.data.balance?t("list-entry",{attrs:{title:"Tier",data:e.getNodeStatusResponse.data.tier}}):e._e(),t("list-entry",{attrs:{title:"Flux IP Address",data:e.getNodeStatusResponse.data.ip}}),t("list-entry",{attrs:{title:"Flux IP Network",data:e.getNodeStatusResponse.data.network}}),t("list-entry",{attrs:{title:"Flux Public Key",data:e.getNodeStatusResponse.data.pubkey}}),e.getNodeStatusResponse.data.collateral?t("div",[t("list-entry",{attrs:{title:"Added Height",number:e.getNodeStatusResponse.data.added_height,href:`https://explorer.runonflux.io/block-index/${e.getNodeStatusResponse.data.added_height}`}}),t("list-entry",{attrs:{title:"Confirmed Height",number:e.getNodeStatusResponse.data.confirmed_height,href:`https://explorer.runonflux.io/block-index/${e.getNodeStatusResponse.data.confirmed_height}`}}),t("list-entry",{attrs:{title:"Last Confirmed Height",number:e.getNodeStatusResponse.data.last_confirmed_height,href:`https://explorer.runonflux.io/block-index/${e.getNodeStatusResponse.data.last_confirmed_height}`}}),t("list-entry",{attrs:{title:"Last Paid Height",number:e.getNodeStatusResponse.data.last_paid_height,href:`https://explorer.runonflux.io/block-index/${e.getNodeStatusResponse.data.last_paid_height}`}}),t("list-entry",{attrs:{title:"Locked Transaction",data:"Click to view",href:`https://explorer.runonflux.io/tx/${e.getNodeStatusResponse.data.txhash}`}})],1):e._e(),t("list-entry",{attrs:{title:"Flux Daemon version",number:e.getInfoResponse.data.version}}),t("list-entry",{attrs:{title:"Protocol version",number:e.getInfoResponse.data.protocolversion}}),t("list-entry",{attrs:{title:"Current Blockchain Height",number:e.getInfoResponse.data.blocks}}),""!==e.getInfoResponse.data.errors?t("list-entry",{attrs:{title:"Error",data:e.getInfoResponse.data.errors,variant:"danger"}}):e._e()],1):e._e()},n=[],r=(a(22489),a(33052)),o=a(95353),i=a(41109),d=a(49469),u=a(44919),l=a(53886);const c=a(95233),g={components:{ListEntry:d.A,BCard:r.v,ToastificationContent:i.A},data(){return{timeoptions:c,callResponse:{status:"",data:""},getNodeStatusResponse:{status:"",data:""},getInfoResponse:{status:"",data:""},connectedPeers:[],incomingConnections:[],filterConnectedPeer:""}},computed:{...(0,o.aH)("flux",["config","userconfig","nodeSection"]),fluxLogTail(){return this.callResponse.data.message?this.callResponse.data.message.split("\n").reverse().filter(e=>""!==e).join("\n"):this.callResponse.data},connectedPeersFilter(){return this.connectedPeers.filter(e=>!this.filterConnectedPeer||e.ip.toLowerCase().includes(this.filterConnectedPeer.toLowerCase()))},incomingConnectionsFilter(){return this.incomingConnections.filter(e=>!this.filterConnectedPeer||e.ip.toLowerCase().includes(this.filterConnectedPeer.toLowerCase()))}},mounted(){this.daemonGetInfo(),this.daemonGetNodeStatus(),this.getownerFluxid()},methods:{async getownerFluxid(){const e=await l.A.getZelid(),t=e.data.data;"success"===e.data.status&&"string"===typeof t&&this.$store.commit("flux/setUserZelid",t)},async daemonGetInfo(){const e=await u.A.getInfo();"error"===e.data.status?this.$toast({component:i.A,props:{title:e.data.data.message||e.data.data,icon:"InfoIcon",variant:"danger"}}):(this.getInfoResponse.status=e.data.status,this.getInfoResponse.data=e.data.data)},async daemonGetNodeStatus(){const e=await u.A.getFluxNodeStatus();"error"===e.data.status?this.$toast({component:i.A,props:{title:e.data.data.message||e.data.data,icon:"InfoIcon",variant:"danger"}}):(this.getNodeStatusResponse.status=e.data.status,this.getNodeStatusResponse.data=e.data.data,"CONFIRMED"===this.getNodeStatusResponse.data.status||"CONFIRMED"===this.getNodeStatusResponse.data.location?(this.getNodeStatusResponse.nodeStatus="Flux is working correctly",this.getNodeStatusResponse.class="success"):"STARTED"===this.getNodeStatusResponse.data.status||"STARTED"===this.getNodeStatusResponse.data.location?(this.getNodeStatusResponse.nodeStatus="Flux has just been started. Flux is running with limited capabilities.",this.getNodeStatusResponse.class="warning"):(this.getNodeStatusResponse.nodeStatus="Flux is not confirmed. Flux is running with limited capabilities.",this.getNodeStatusResponse.class="danger"))}}},h=g;var p=a(81656),f=(0,p.A)(h,s,n,!1,null,null,null);const m=f.exports},41109:(e,t,a)=>{a.d(t,{A:()=>l});var s=function(){var e=this,t=e._self._c;return t("div",{staticClass:"toastification"},[t("div",{staticClass:"d-flex align-items-start"},[t("b-avatar",{staticClass:"mr-75 flex-shrink-0",attrs:{variant:e.variant,size:"1.8rem"}},[t("feather-icon",{attrs:{icon:e.icon,size:"15"}})],1),t("div",{staticClass:"d-flex flex-grow-1"},[t("div",[e.title?t("h5",{staticClass:"mb-0 font-weight-bolder toastification-title",class:`text-${e.variant}`,domProps:{textContent:e._s(e.title)}}):e._e(),e.text?t("small",{staticClass:"d-inline-block text-body",domProps:{textContent:e._s(e.text)}}):e._e()]),t("span",{staticClass:"cursor-pointer toastification-close-icon ml-auto",on:{click:function(t){return e.$emit("close-toast")}}},[e.hideClose?e._e():t("feather-icon",{staticClass:"text-body",attrs:{icon:"XIcon"}})],1)])],1)])},n=[],r=a(53950);const o={components:{BAvatar:r.Cq},props:{variant:{type:String,default:"primary"},icon:{type:String,default:null},title:{type:String,default:null},text:{type:String,default:null},hideClose:{type:Boolean,default:!1}}},i=o;var d=a(81656),u=(0,d.A)(i,s,n,!1,null,"22d964ca",null);const l=u.exports},44919:(e,t,a)=>{a.d(t,{A:()=>n});var s=a(544);const n={help(){return(0,s.A)().get("/daemon/help")},helpSpecific(e){return(0,s.A)().get(`/daemon/help/${e}`)},getInfo(){return(0,s.A)().get("/daemon/getinfo")},getFluxNodeStatus(){return(0,s.A)().get("/daemon/getzelnodestatus")},getRawTransaction(e,t){return(0,s.A)().get(`/daemon/getrawtransaction/${e}/${t}`)},listFluxNodes(){return(0,s.A)().get("/daemon/listzelnodes")},viewDeterministicFluxNodeList(){return(0,s.A)().get("/daemon/viewdeterministiczelnodelist")},getFluxNodeCount(){return(0,s.A)().get("/daemon/getzelnodecount")},getStartList(){return(0,s.A)().get("/daemon/getstartlist")},getDOSList(){return(0,s.A)().get("/daemon/getdoslist")},fluxCurrentWinner(){return(0,s.A)().get("/daemon/fluxcurrentwinner")},getBenchmarks(){return(0,s.A)().get("/daemon/getbenchmarks")},getBenchStatus(){return(0,s.A)().get("/daemon/getbenchstatus")},startBenchmark(e){return(0,s.A)().get("/daemon/startbenchmark",{headers:{zelidauth:e}})},stopBenchmark(e){return(0,s.A)().get("/daemon/stopbenchmark",{headers:{zelidauth:e}})},getBlockCount(){return(0,s.A)().get("/daemon/getBlockCount")},getBlockchainInfo(){return(0,s.A)().get("/daemon/getblockchaininfo")},getMiningInfo(){return(0,s.A)().get("/daemon/getmininginfo")},getNetworkInfo(){return(0,s.A)().get("/daemon/getnetworkinfo")},validateAddress(e,t){return(0,s.A)().get(`/daemon/validateaddress/${t}`,{headers:{zelidauth:e}})},getWalletInfo(e){return(0,s.A)().get("/daemon/getwalletinfo",{headers:{zelidauth:e}})},listFluxNodeConf(e){return(0,s.A)().get("/daemon/listzelnodeconf",{headers:{zelidauth:e}})},start(e){return(0,s.A)().get("/daemon/start",{headers:{zelidauth:e}})},restart(e){return(0,s.A)().get("/daemon/restart",{headers:{zelidauth:e}})},stopDaemon(e){return(0,s.A)().get("/daemon/stop",{headers:{zelidauth:e}})},rescanDaemon(e,t){return(0,s.A)().get(`/daemon/rescanblockchain/${t}`,{headers:{zelidauth:e}})},getBlock(e,t){return(0,s.A)().get(`/daemon/getblock/${e}/${t}`)},tailDaemonDebug(e){return(0,s.A)().get("/flux/taildaemondebug",{headers:{zelidauth:e}})},justAPI(){return(0,s.A)()},cancelToken(){return s.x}}},53886:(e,t,a)=>{a.d(t,{A:()=>n});var s=a(544);const n={softUpdateFlux(e){return(0,s.A)().get("/flux/softupdateflux",{headers:{zelidauth:e}})},softUpdateInstallFlux(e){return(0,s.A)().get("/flux/softupdatefluxinstall",{headers:{zelidauth:e}})},updateFlux(e){return(0,s.A)().get("/flux/updateflux",{headers:{zelidauth:e}})},hardUpdateFlux(e){return(0,s.A)().get("/flux/hardupdateflux",{headers:{zelidauth:e}})},rebuildHome(e){return(0,s.A)().get("/flux/rebuildhome",{headers:{zelidauth:e}})},updateDaemon(e){return(0,s.A)().get("/flux/updatedaemon",{headers:{zelidauth:e}})},reindexDaemon(e){return(0,s.A)().get("/flux/reindexdaemon",{headers:{zelidauth:e}})},updateBenchmark(e){return(0,s.A)().get("/flux/updatebenchmark",{headers:{zelidauth:e}})},getFluxVersion(){return(0,s.A)().get("/flux/version")},broadcastMessage(e,t){const a=t,n={headers:{zelidauth:e}};return(0,s.A)().post("/flux/broadcastmessage",JSON.stringify(a),n)},connectedPeers(){return(0,s.A)().get(`/flux/connectedpeers?timestamp=${Date.now()}`)},connectedPeersInfo(){return(0,s.A)().get(`/flux/connectedpeersinfo?timestamp=${Date.now()}`)},incomingConnections(){return(0,s.A)().get(`/flux/incomingconnections?timestamp=${Date.now()}`)},incomingConnectionsInfo(){return(0,s.A)().get(`/flux/incomingconnectionsinfo?timestamp=${Date.now()}`)},addPeer(e,t){return(0,s.A)().get(`/flux/addpeer/${t}`,{headers:{zelidauth:e}})},removePeer(e,t){return(0,s.A)().get(`/flux/removepeer/${t}`,{headers:{zelidauth:e}})},removeIncomingPeer(e,t){return(0,s.A)().get(`/flux/removeincomingpeer/${t}`,{headers:{zelidauth:e}})},adjustKadena(e,t,a){return(0,s.A)().get(`/flux/adjustkadena/${t}/${a}`,{headers:{zelidauth:e}})},adjustRouterIP(e,t){return(0,s.A)().get(`/flux/adjustrouterip/${t}`,{headers:{zelidauth:e}})},adjustBlockedPorts(e,t){const a={blockedPorts:t},n={headers:{zelidauth:e}};return(0,s.A)().post("/flux/adjustblockedports",a,n)},adjustAPIPort(e,t){return(0,s.A)().get(`/flux/adjustapiport/${t}`,{headers:{zelidauth:e}})},adjustBlockedRepositories(e,t){const a={blockedRepositories:t},n={headers:{zelidauth:e}};return(0,s.A)().post("/flux/adjustblockedrepositories",a,n)},getKadenaAccount(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/kadena",e)},getRouterIP(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/routerip",e)},getBlockedPorts(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/blockedports",e)},getAPIPort(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/apiport",e)},getBlockedRepositories(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/blockedrepositories",e)},getMarketPlaceURL(){return(0,s.A)().get("/flux/marketplaceurl")},getFluxInfo(){return(0,s.A)().get("/flux/info")},getZelid(){const e={headers:{"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/zelid",e)},getStaticIpInfo(){return(0,s.A)().get("/flux/staticip")},restartFluxOS(e){const t={headers:{zelidauth:e,"x-apicache-bypass":!0}};return(0,s.A)().get("/flux/restart",t)},tailFluxLog(e,t){return(0,s.A)().get(`/flux/tail${e}log`,{headers:{zelidauth:t}})},justAPI(){return(0,s.A)()},cancelToken(){return s.x}}},95233:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const s={year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"},n={year:"numeric",month:"short",day:"numeric"},r={shortDate:s,date:n}}}]);